package gametute2.graphics;

import gametute2.entity.projectile.Projectile;
import gametute2.level.tile.Tile;

public class Screen {
	public int width,height; // this is the height and width of the whole screen.
	public final int MAP_SIZE = 64; //not sure yet.
	public int pixels[]; // from what the pixels are initialized i can come to the conclusion that it's the pixel of the screen.
	//public int tiles[] = new int[MAP_SIZE * MAP_SIZE]; //tile is , each tile in a screen maybe? hm i guess that's it :3
	public int xOffset, yOffset;
	
	//private Random random = new Random();
	
	public Screen(int width,int height) {
		this.width=width;
		this.height=height;
		pixels = new int[width*height]; 
		
	}
	
	public void clear() { 						//turning the whole screen black.
		for(int i=0; i<pixels.length; i++) 		//pixels.length = width*height, basically it'll cover the whole screen.
			pixels[i]=0; 						//basically making all the tiles BLACK.
	}
	
	public void renderSprite(int xp,int yp, Sprite sprite,boolean fixed){
		if(fixed){
			xp -= xOffset;
			yp -= yOffset;
		}
		for(int y = 0; y < sprite.getHeight() ; y++){
			int ya = y + yp;
			for(int x = 0 ; x < sprite.getWidth(); x++){
				int xa = x + xp;
				if(xa < 0 || xa >= width || ya < 0 || ya >= height) continue;
				pixels[xa + ya * width] = sprite.pixels[x + y * sprite.getWidth()];
			}
		}
	}
	
	public void renderSheet(int xp,int yp, SpriteSheet sheet,boolean fixed){
		if(fixed){
			xp -= xOffset;
			yp -= yOffset;
		}
		for(int y = 0; y < sprite.getHeight() ; y++){
			int ya = y + yp;
			for(int x = 0 ; x < sprite.getWidth(); x++){
				int xa = x + xp;
				if(xa < 0 || xa >= width || ya < 0 || ya >= height) continue;
				pixels[xa + ya * width] = sprite.pixels[x + y * sprite.getWidth()];
			}
		}
	}
	public void renderTile(int xp, int yp, Tile tile) {
		xp -= xOffset;
		yp -= yOffset;
		for(int y=0; y<tile.sprite.SIZE; y++) {
			int ya = y + yp; //y-absolute
			for(int x=0; x<tile.sprite.SIZE; x++) {
				int xa = x + xp; //x-absolute
				if(xa<(-tile.sprite.SIZE) || xa>=width || ya<0 || ya>=height) break;
				if(xa<0) xa=0;
				pixels[xa+ya*width] = tile.sprite.pixels[x+y*tile.sprite.SIZE];
				
			}
		}
	}
	public void renderProjectile(int xp, int yp, Projectile p) {
		xp -= xOffset;
		yp -= yOffset;
		for(int y=0; y<p.getSprite().SIZE; y++) {
			int ya = y + yp; //y-absolute
			for(int x=0; x<p.getSprite().SIZE; x++) {
				int xa = x + xp; //x-absolute
				if(xa<(-p.getSprite().SIZE) || xa>=width || ya<0 || ya>=height) break;
				if(xa<0) xa=0;
				int color = p.getSprite().pixels[x+y*p.getSprite().SIZE];
				if(color != 0xffff00ff)
					pixels[xa+ya*width] = color;
				
			}
		}
	}
	public void renderTile(int xp, int yp, Sprite sprite) {
		xp -= xOffset;
		yp -= yOffset;
		for(int y=0; y<sprite.SIZE; y++) {
			int ya = y + yp; //y-absolute
			for(int x=0; x<sprite.SIZE; x++) {
				int xa = x + xp; //x-absolute
				if(xa<(-sprite.SIZE) || xa>=width || ya<0 || ya>=height) break;
				if(xa<0) xa=0;
				pixels[xa+ya*width] = sprite.pixels[x+y*sprite.SIZE];
				
			}
		}
	}
	public void renderPlayer(int xp, int yp , Sprite sprite,int flip){
		xp -= xOffset;
		yp -= yOffset;
		for(int y=0; y<32; y++) {
			int ya = y + yp; //y-absolute
			int ys	= y,xs; // flip = 1, means flip x and flip = 2 means flip y , and flip 3 means flip both
			if(flip == 2 || flip == 3) ys = 31 - y;
			for(int x=0; x<32; x++) {
				xs = x;
				int xa = x + xp; //x-absolute
				if(flip == 1 || flip == 3) xs = 31 - x;
				if(xa<(-32) || xa>=width || ya<0 || ya>=height) break;
				if(xa<0) xa=0;
				int col = sprite.pixels[xs + ys * 32];
				if(col != 0xffff00ff) pixels[xa+ya*width] = col;
				
			}
		}
	}
	
	public void setOffset(int xOffset,int yOffset){
		this.xOffset = xOffset;
		this.yOffset = yOffset;
	}
}



